"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-plug
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')

"Spacemacs (use local vim-spacemacs if possible)
if !empty(glob("~/repos/vim-spacemacs"))
  Plug '~/repos/vim-spacemacs'
else
  Plug 'jimmay5469/vim-spacemacs'
endif

"Key binding menues
Plug 'hecal3/vim-leader-guide'

"Good defaults
Plug 'tpope/vim-sensible'
"Plug 'PreserveNoEOL' "required for editorconfig-vim
Plug 'editorconfig/editorconfig-vim'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-repeat'

"Navigation
Plug 'tpope/vim-vinegar'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'easymotion/vim-easymotion'

"Pane navigation
Plug 'christoomey/vim-tmux-navigator'

"Theme
Plug 'chriskempson/base16-vim'
Plug 'ap/vim-css-color'
Plug 'luochen1990/rainbow'

"Git
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'

"Syntax hightlighting
Plug 'sheerun/vim-polyglot'

"Better autochdir
Plug 'airblade/vim-rooter'

"Autocomplete
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'jiangmiao/auto-pairs'
Plug 'mattn/emmet-vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-surround'

call plug#end()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Fix copy paste error in osx sierra
set clipboard=unnamed

"Enable mouse click/scroll
set mouse=a

"Line numbers
set number

"Tabs
set tabstop=2
set shiftwidth=2

"Turn on highlights
set cursorline
set hlsearch

"CursorLine only on active pane
augroup CursorLineHighlight
  au!
  au WinEnter * set cursorline
  au WinLeave * set nocursorline
augroup end

":e autocomplete settings
set wildmenu
set wildmode=longest:list,full

"Don't create swap files
set nobackup
set nowritebackup
set noswapfile

"Ignores
set wildignore+=*tmp/*,*node_modules/*,*bower_components/*,*.git/*,*.pyc,*lib/python*

"EditorConfig settings
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

"Better autochdir
let g:rooter_silent_chdir = 1

"Folding
set foldmethod=indent
set foldlevelstart=99

"Navigation
let g:EasyMotion_smartcase = 1

"Automatically reload changed files
augroup reload
  au!
  au FocusGained * :checktime
augroup end
let g:signify_update_on_bufenter = 1
let g:signify_update_on_focusgained = 1

"Autocomplete
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"
let g:coc_global_extensions = [
\  'coc-json',
\  'coc-tsserver',
\  'coc-eslint',
\  'coc-styled-components',
\]
let g:user_emmet_settings = {
\  'javascript' : {
\    'extends' : 'jsx',
\  },
\}


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Statusline/Tabline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! ShortPath(path)
  let cwd = substitute(a:path, $HOME, "~", "")
  return substitute(cwd, "\\~/repos/", "", "")
endfunction
function! ShortFilepath()
  return ShortPath(expand("%f"))
endfunction
function! ShortCWD()
  return ShortPath(getcwd())
endfunction
function! IsModified()
  return &modified?"[+]":""
endfunction

"Statusline
function! StatusLine()
  let s = ''
  let s .= '%{IsModified()}%r' "File status
  let s .= ' %{ShortFilepath()}:%{line(".")}:%{col(".")}'
  let s .= '%=%L ' "Right align line numbers
  return s
endfunction
set statusline=%!StatusLine()

"Tabline
set showtabline=2
function! Tabline()
  let s = ''
  for i in range(tabpagenr('$'))
    let tab = i + 1
    let winnr = tabpagewinnr(tab)
    let buflist = tabpagebuflist(tab)
    let bufnr = buflist[winnr - 1]
    let bufname = bufname(bufnr)

    let s .= '%' . tab . 'T'
    let s .= (tab == tabpagenr() ? '%#TabLineSel#' : '%#TabLine#')
    let s .= (bufname != '' ? '['. fnamemodify(bufname, ':t') . ']' : '[No Name]')
  endfor

  let s .= '%#TabLineFill#'

  "Right-align the CWD
  let s .= '%=%#TabLineSel#[%{ShortCWD()}]'

  return s
endfunction
set tabline=%!Tabline()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Style
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Theme
let g:rainbow_active = 1
let g:rainbow_conf = {
\  'ctermfgs': ['blue', 'yellow', 'cyan', 'magenta']
\}

"Syntax highlighting
if $TERM_PROGRAM == "iTerm.app" && filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

function! s:base16_customize() abort
  call Base16hi("CursorLine", "", "", "", "none", "", "")
  call Base16hi("CursorLineNr", "", "", "0", "236", "", "")
  call Base16hi("Search", "", "", "0", "39", "", "")
  call Base16hi("Comment", "", "", "", "", "italic", "")
endfunction

augroup on_change_colorschema
  au!
  au ColorScheme * call s:base16_customize()
augroup END


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Key Bindings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader = "\<SPACE>"

let g:spacemacs#plugins = [
\  'easymotion/vim-easymotion',
\  'junegunn/fzf.vim',
\  'tpope/vim-fugitive',
\]
let g:spacemacs#excludes = [
\  '^br',
\  '^cp',
\  '^fed',
\  '^ff',
\  '^fs',
\  '^pp',
\  '^taf',
\]

nnoremap <LEADER>br :checktime<CR>:e<CR>
nnoremap <LEADER>cp :let @+= ShortFilepath()<CR>
nnoremap <LEADER>fed :e ~/repos/dotfiles/.vimrc.symlink<CR>
nnoremap <LEADER>ff :e <C-R>=substitute(expand("%:p:h"), getcwd(), ".", "")<CR>/
nnoremap <LEADER>fs :wa<CR>
nnoremap <LEADER>pp :e ~/repos/
nnoremap <UP> <C-Y>
nnoremap <DOWN> <C-E>

"Key binding menues
nnoremap <silent> <LEADER> :<C-U>LeaderGuide '<SPACE>'<CR>
vnoremap <silent> <LEADER> :<C-U>LeaderGuideVisual '<SPACE>'<CR>

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

"Reload vim-spacemacs if it is local
if !empty(glob("~/repos/vim-spacemacs"))
  let g:spacemacs#excludes = add(g:spacemacs#excludes, '^feR')
  nnoremap <LEADER>feR :source ~/.vimrc<CR>:source ~/repos/vim-spacemacs/plugin/spacemacs.vim<CR>
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Testing new things
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"F1 to see syntax highlight under cursor
nm <silent> <F1> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name")
\  . '> trans<' . synIDattr(synID(line("."),col("."),0),"name")
\  . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name")
\  . ">"<CR>

"Highlight all instances of word under cursor, when idle.
"Useful when studying strange source code.
nnoremap <LEADER>* :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=50
    return 1
  endif
endfunction
