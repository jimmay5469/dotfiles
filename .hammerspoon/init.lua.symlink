local margin = 10

local windowStatuses = {}
function getWindowStatus(win)
  local id = win:id()
  local status = windowStatuses[id]

  if status == nil then
    local winFrame = win:frame()
    status = {}
    windowStatuses[id] = status
    status.customW = winFrame.w
    status.customH = winFrame.h
    status.size = "CUSTOM"
  end

  return status
end

function hyperBind(key, fn)
  hs.hotkey.bind({"cmd", "alt", "ctrl"}, key, fn)
  hs.hotkey.bind({"cmd", "alt", "ctrl", "shift"}, key, fn)
end

hyperBind("w", function()
  hs.alert.show("Hello World!")
end)

hs.alert.show("Welcome!")
hyperBind("r", function()
  hs.alert.show("Reloading config...")
  hs.timer.doAfter(0.1, hs.reload)
end)

function getX(position, winFrame, screenFrame)
  local min = screenFrame.x + margin
  local max = screenFrame.x + screenFrame.w - winFrame.w - margin
  local positions = {
    ["LEFT"] = min,
    ["CENTER"] = (min + max) / 2,
    ["RIGHT"] = max
  }
  return positions[position]
end

function getY(position, winFrame, screenFrame)
  local min = screenFrame.y + margin
  local max = screenFrame.y + screenFrame.h - winFrame.h - margin
  local positions = {
    ["TOP"] = min,
    ["CENTER"] = (min + max) / 2,
    ["BOTTOM"] = max
  }
  return positions[position]
end

function toggleSize(win, yPosition, xPosition)
  local winFrame = win:frame()
  local screen = win:screen()
  local screenFrame = screen:frame()
  local status = getWindowStatus(win)

  if status.size == "CUSTOM" then
    winFrame.w = screenFrame.w - 150 > 1700 and 1700 or screenFrame.w - 150
    winFrame.h = screenFrame.h - 75 > 1100 and 1100 or screenFrame.h - 75
    status.size = "GOLDEN"
    hs.alert.show("Golden")
  else
    winFrame.w = status.customW
    winFrame.h = status.customH
    status.size = "CUSTOM"
    hs.alert.show("Custom")
  end

  winFrame.x = getX(xPosition, winFrame, screenFrame)
  winFrame.y = getY(yPosition, winFrame, screenFrame)

  win:setFrame(winFrame, 0)
end

function move(win, yPosition, xPosition)
  local winFrame = win:frame()
  local screen = win:screen()
  local screenFrame = screen:frame()
  local status = getWindowStatus(win)

  winFrame.x = getX(xPosition, winFrame, screenFrame)
  winFrame.y = getY(yPosition, winFrame, screenFrame)

  win:setFrame(winFrame)
end

function moveOrToggleSize(win, yPosition, xPosition)
  local status = getWindowStatus(win)

  if status.inWell or status.yPosition == yPosition and status.xPosition == xPosition then
    toggleSize(win, yPosition, xPosition)
  else
    move(win, yPosition, xPosition)
  end

  status.inWell = false
  status.xPosition = xPosition
  status.yPosition = yPosition
end

hyperBind("y", function()
  moveOrToggleSize(hs.window.focusedWindow(), "TOP", "LEFT")
end)

hyperBind("u", function()
  moveOrToggleSize(hs.window.focusedWindow(), "TOP", "CENTER")
end)

hyperBind("i", function()
  moveOrToggleSize(hs.window.focusedWindow(), "TOP", "RIGHT")
end)

hyperBind("h", function()
  moveOrToggleSize(hs.window.focusedWindow(), "CENTER", "LEFT")
end)

hyperBind("j", function()
  moveOrToggleSize(hs.window.focusedWindow(), "CENTER", "CENTER")
end)

hyperBind("k", function()
  moveOrToggleSize(hs.window.focusedWindow(), "CENTER", "RIGHT")
end)

hyperBind("n", function()
  moveOrToggleSize(hs.window.focusedWindow(), "BOTTOM", "LEFT")
end)

hyperBind("m", function()
  moveOrToggleSize(hs.window.focusedWindow(), "BOTTOM", "CENTER")
end)

hyperBind(",", function()
  moveOrToggleSize(hs.window.focusedWindow(), "BOTTOM", "RIGHT")
end)

hyperBind("c", function()
  local win = hs.window.focusedWindow()
  local winFrame = win:frame()
  local status = getWindowStatus(win)

  status.customW = winFrame.w
  status.customH = winFrame.h
  status.size = "CUSTOM"
end)

hyperBind("[", function()
  local win = hs.window.focusedWindow()
  local winFrame = win:frame()
  local screen = win:screen()
  local screenFrame = screen:frame()
  local status = getWindowStatus(win)

  status.inWell = true
  status.xPosition = nil
  status.yPosition = nil
  status.size = "GOLDEN"

  winFrame.x = screenFrame.x + margin
  winFrame.y = screenFrame.y + margin
  winFrame.w = screenFrame.w / 2 - margin * 1.5
  winFrame.h = screenFrame.h - margin * 2

  win:setFrame(winFrame, 0)
end)

hyperBind("]", function()
  local win = hs.window.focusedWindow()
  local winFrame = win:frame()
  local screen = win:screen()
  local screenFrame = screen:frame()
  local status = getWindowStatus(win)

  status.inWell = true
  status.xPosition = nil
  status.yPosition = nil
  status.size = "GOLDEN"

  winFrame.x = screenFrame.x + (screenFrame.w / 2) + margin / 2
  winFrame.y = screenFrame.y + margin
  winFrame.w = screenFrame.w / 2 - margin * 1.5
  winFrame.h = screenFrame.h - margin * 2

  win:setFrame(winFrame, 0)
end)

hyperBind("=", function()
  local win = hs.window.focusedWindow()
  local winFrame = win:frame()
  local screen = win:screen()
  local screenFrame = screen:frame()
  local status = getWindowStatus(win)

  if status.inWell then
    return
  end

  winFrame.w = winFrame.w + 50
  winFrame.h = winFrame.h + 20

  if status.yPosition and status.xPosition then
    winFrame.x = getX(status.xPosition, winFrame, screenFrame)
    winFrame.y = getY(status.yPosition, winFrame, screenFrame)
  else
    winFrame.x = winFrame.x - 50 / 2
    winFrame.y = winFrame.y - 20 / 2
  end

  status.customW = winFrame.w
  status.customH = winFrame.h
  status.size = "CUSTOM"

  win:setFrame(winFrame, 0)
end)

hyperBind("-", function()
  local win = hs.window.focusedWindow()
  local winFrame = win:frame()
  local screen = win:screen()
  local screenFrame = screen:frame()
  local status = getWindowStatus(win)

  if status.inWell then
    return
  end

  winFrame.w = winFrame.w - 50
  winFrame.h = winFrame.h - 20

  if status.yPosition and status.xPosition then
    winFrame.x = getX(status.xPosition, winFrame, screenFrame)
    winFrame.y = getY(status.yPosition, winFrame, screenFrame)
  else
    winFrame.x = winFrame.x + 50 / 2
    winFrame.y = winFrame.y + 20 / 2
  end

  status.customW = winFrame.w
  status.customH = winFrame.h
  status.size = "CUSTOM"

  win:setFrame(winFrame, 0)
end)
